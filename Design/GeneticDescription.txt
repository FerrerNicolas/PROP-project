Genetic algorithm.

--Brief description--
The genetic algorithm creates a initial population of possible guesses and applies genetic mutations to it, to get a new
population set. That set is given a fitness function, that evaluates the set and assigns a score based on how likely an
individual code in the set could be the solution to the secret code. The most likely codes are added to an array of
possible solutions and we add them to a new set of population in which we repeat the process, until the likely choices
are filled, or we have arrived at a limit number of generations. To assign the next guess we give a random code that
hasn't been played before from the random choices.

--Genetic mutations--
We have 4 types of genetic mutation functions, these are crossover, mutation, permutation and reversing.
    --Crossover--
    The crossover function is given two codes, and generates a new code, that is a combination of both codes. To generate
    this new code, each position of the code returned has a 0.5 probability of being a color in that position of
    one of the two previous codes.
    --Mutation--
    Mutation has a 0.03 probability of being executed, and it takes the code produced by the crossover function, then
    it changes a random position of the given code to another random color.
    --Permutation--
    Permutation happens with a probability of 0.03, it works with the code produced by crossover and maybe mutated,
    and swaps to random positions of the code, changing their colors to the other one.
    --Reversing--
    Reversing is the final genetic function, it takes the previously worked upon code. It generates two random numbers
    that are possible index of code, and reverses the numbers between those possible indexes.

--Fitness and chosen ones array--
Once we filled the population of sons of the previous one we assign a fitness score to them. This fitness score is
calculated by the result the code would get if the previous guesses were the solution of the secret code, and subtracting
the correction given to the correction the previous guessed code got, and give the result in absolute value. We then add
all the differences to the previous code and return it, if the fitness score was a 0 that code is a possible solution and
add it to the chosen ones array. Once every code is given a fitness score, we take all the possible ones, and if the
chosen ones array isn't filled, or we arrived the maximum number of generations, we add the chosen ones to the next
population to apply the mutation functions and repeat the process till one of the conditions is fulfilled.


--Genetic algorithm stats--

When playing in easy the algorithm takes 1950972milliseconds and 312539turns to play a million games. In median it takes
1.95 milliseconds to play a game and 3.13 turns. The maximum time it took the algorithm to play a game was 389milliseconds

Playing a million games in medium the algorithm 19649820 milliseconds and 3611774turns. That makes a median of
19.65 milliseconds and 3.61 turns per game. The maximum time it took the algorithm to play a game in medium was 450 milliseconds.

THe hard tests played ten thousand games and it took 5845812 millisecons and 43786turns to complete the tests.
That is a medium value of 584.58 milliseconds per game and 4.79 turns to complete a game. The game that took the most time
in hard took 3666 milliseconds to complete.
